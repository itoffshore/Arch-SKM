#!/bin/sh
#
# Arch Build Kernel
# --------------------------
# with Signed Kernel Modules
# --------------------------------------
# https://github.com/itoffshore/Arch-SKM
#
# Stuart Cardall 20240822
#
############################################
## USER configuration ######################
## run script with no parameters for help ##
############################################
BUILD_DIR=~/build
GUI_EDITOR=mousepad
CONSOLE_EDITOR=nano
MAIN_KERNELS="linux linux-hardened linux-lts linux-zen"
AUR_KERNELS="linux-xanmod linux-ck linux-libre"
MAKEPKG_DIR=/tmp/makepkg
# set to N to choose module compression
AUTOMATED="Y"
## custom USER VARS are sourced
#################################
USER_CONFIG=~/.config/abk.conf ##
######################################################
EXAMPLES=/usr/share/arch-sign-modules/PKGBUILD.example
README=/usr/share/arch-sign-modules/README.scripts.md
######################################################

usage() {
	local script=
	script=$(basename "$0")

        cat <<EOF
Arch Linux Sign Modules:
------------------------

If ~/.config/abk.conf exists USER configurable variables will be sourced by abk:

BUILD_DIR=$BUILD_DIR
GUI_EDITOR=$GUI_EDITOR
CONSOLE_EDITOR=$CONSOLE_EDITOR
MAIN_KERNELS=$MAIN_KERNELS
AUR_KERNELS=$AUR_KERNELS
MAKEPKG_DIR=$MAKEPKG_DIR
AUTOMATED=Y

Edit to suit your local environment.
------------------------------------

Usage: $script [OPTIONS]
	[ -u ] : update [ kernel-name ]
	[ -b ] : build [ kernel-name ]
	[ -i ] : install [ kernel-name / AUR pkgname ]
	[ -r ] : rebuild [ kernel-name ]
	[ -y ] : yes ( assume YES answers during build stage )
	[ -c ] : clean [ /path/to/directory ] ( quickly with rsync )
	[ -s ] : clean makepkg source dir selectively ( $(parse_makepkg SRCDEST) )
	[ -l ] : clean makepkg log dir selectively ( $(parse_makepkg LOGDEST) )
	[ -o ] : remove old packages selectively ( $(parse_makepkg PKGDEST) )
	[ -w ] : print build log warnings [ kernel-name ]
	[ -h ] : this help message

Run the following 3 commands in sequence with a kernel variant to build a signed kernel:
----------------------------------------------------------------------------------------
 $script -u linux-hardened
 $script -b linux-hardened
 $script -i linux-hardened

The -i option can also print a menu with version choices for any manually built package e.g:
--------------------------------------------------------------------------------------------
 $script -i AUR-pkgname

The build stage can assume YES for running automated:
-----------------------------------------------------
 $script -y -b linux-hardened

Automated mode can also be enabled by adding AUTOMATED=Y to your ~/.config/abk.conf

To rebuild a previous kernel PKGBUILD that abk archived in \$BUILD_DIR/kernel-ver.tar.xz:
----------------------------------------------------------------------------------------
 $script -r linux-hardened

Utilities:
--------------------------
 $script -c /path/to/somewhere
 $script -s
 $script -l
 $script -o
 $script -w kernel-name

EOF
        exit 0
}

check_kernel() {
	local calling_fn=$1

	# sets global vars $REPO $KBUILD_DIR after cmdline parsed
	KBUILD_DIR=${BUILD_DIR}/${KERNEL}

	# rebuild checks
	if [ "$calling_fn" = "rebuild" ]; then
		return
	fi

	# build checks
	if [ "$calling_fn" = "build" ] && [ ! -d "$KBUILD_DIR" ]; then
		error "No config to build kernel '$KERNEL' => update step not run ?"; die
	fi

	# install checks
	if [ "$calling_fn" != "install" ]; then
		if echo "$MAIN_KERNELS" | grep -qw "$KERNEL"; then
			REPO='main'
		elif echo "$AUR_KERNELS" | grep -qw "$KERNEL"; then
			REPO='aur'
		else
			warning "Add '$KERNEL' to AUR_KERNELS in: $USER_CONFIG"
			msg2 "Assuming '$KERNEL' is from AUR"
			REPO='aur'
		fi
	fi
}

check_session() {
	# https://wiki.archlinux.org/title/Xinit#Autostart_X_at_login
	if [ -n "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
		echo "graphical"
	else
		echo "terminal"
	fi
}

check_config() {
	local x= editor_list=

	# check PKGBUILD configuration dir
	if [ ! -d "$BUILD_DIR" ]; then
		if ! mkdir -p $BUILD_DIR 2>/dev/null; then
			error "PKGBUILD configuration directory: '$BUILD_DIR' cannot be created."; die
		fi
	fi

	# check installed editors
	if [ "$(check_session)" = "graphical" ]; then
		editor_list="$GUI_EDITOR $CONSOLE_EDITOR"
	else
		editor_list="$CONSOLE_EDITOR"
	fi

	for x in ${editor_list}; do
		if ! type "$x" > /dev/null 2>&1; then
			error "Please set suitable \$EDITOR VARS in $USER_CONFIG (or install '$x')"
			error "See also: $README"; die
		fi
	done
}

check_pkgver() {
	# some AUR packages use variables for $pkgver
	# sourcing a PKGBUILD with function names starting with an underscore gives errors
	local pkgbuild=${KBUILD_DIR}/PKGBUILD search_str='prepare()'
	local line= tmp=

	tmp=$(mktemp)

	if [ -f "$pkgbuild" ]; then
		line=$(grep -nm1 ^$search_str "$pkgbuild" | cut -d : -f1)
		head -n $(( line -1 )) "$pkgbuild"  > "$tmp"

		# shellcheck disable=SC1090 # $tmp location is random
		. "$tmp" && rm -f "$tmp"
	else
		warning "No PKGBUILD to check version"
		return 1
	fi
}

check_algo() {
	echo "${1#CONFIG_MODULE_COMPRESS_*}" | cut -d'=' -f 1
}

check_compress() {
	local config= algo_detect=true compression= compress_list= algo_list=
	local ans= x= ctr=0 config_str= algo= choice=0 arch=

	# linux-libre supports multiple arches
	arch=$(lscpu | grep ^Architecture | awk '{print $2}')
	config=$(find "$KBUILD_DIR" -maxdepth 1 -type f -regextype posix-extended \
		-regex ".*config(.$arch)?")

	# some AUR kernels do not ship a kernel config
	if [ -n "$config" ] && [ -f "$config" ]; then
		compression=$(grep -hE "^CONFIG_MODULE_COMPRESS_[A-Z]+=y" "$config")
		compress_list=$(grep -hE "CONFIG_MODULE_COMPRESS_[A-Z]+" "$config" \
			| sed 's|#||' | awk '{print $1}')

		for x in $compress_list; do
			algo_list="$algo_list $(check_algo "$x")"
		done
	else
		if [ "$REPO" = "aur" ]; then
			# linux-xanmod-cacule generates kernel config during prepare()
			warning "Missing kernel config cannot reconfigure module compression"
			warning "Some $REPO kernels make use of modprobed-db in prepare() <ENTER>"; read -r ans
			return
		else	# Officially supported kernels ship a kernel config so quit
			warning "No kernel config in: $KBUILD_DIR: cannot reconfigure module compression"
			error "Did you run 'abk -u kernel-variant' first ?"; die
		fi
	fi

	algo=$(check_algo "$compression")

	if [ -z "$algo" ]; then
		algo="unconfigured"
		algo_detect=false
	fi

	ask "Change current module compression: '$algo' ? [y/N] : "; read -r ans

	if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
		echo

		# print compression menu
		for x in $algo_list; do
			ctr=$(( ctr +1 ))
			plain "$ctr) : $x"
		done

		ans=0
		echo

		# read choice
		while [ $ans  -lt 1 ] || [ $ans -gt $ctr ]; do
			ask "Choose compression [1 - $ctr] : "; read -r ans
			ans=$(echo "$ans" | tr -cd "[:digit:]")
			if [ -z "$ans" ]; then echo; warning "Compression unchanged"; return; fi

			# shellcheck disable=SC2086 # quoting $algo_list breaks awk
			choice=$(echo $algo_list | awk -v var="$ans" '{print $var}')
		done

		# change config
		config_str="CONFIG_MODULE_COMPRESS_$choice"

		if [ "$algo" != "$choice" ]; then
			if $algo_detect; then
				# unset existing compression
				sed -i "s|^$compression|# CONFIG_MODULE_COMPRESS_$algo is not set|" "$config"
			fi
			# set new compression
			sed -i "s|.*$config_str.*|$config_str=y|" "$config"
		else
			warning "Existing compression chosen: not reconfiguring <ENTER>"; read -r ans
		fi
	else
		# nothing chosen
		compression=$(grep -hE "^CONFIG_MODULE_COMPRESS_[A-Z]+=y" "$config")
		msg "Module compression unchanged as: $compression"
	fi
}

archive_config() {
	# Archive kernel configs
	local archive=

	# source PKGBUILD vars
	check_pkgver

	# shellcheck disable=SC2154 # $pkgver is sourced in check_pkgver()
	archive=$KERNEL-$pkgver.tar.xz

	cd $BUILD_DIR || die

	# create archive
	if [ -d "$KERNEL" ]; then
		msg "Backing up: $KBUILD_DIR => $BUILD_DIR/$archive"
		tar -cJf "$archive" -C $BUILD_DIR "$KERNEL"
	fi
}

remove_old_pkgs() {
	local pkgdir= target= keep= ans=

	pkgdir=$(parse_makepkg PKGDEST)

	if [ -x "$(which paccache)" ]; then
		msg "Preparing to clean old packages in: $pkgdir\n"
		ask "Enter number of packages to keep ? [ default: 3 ] : "; read -r ans
		keep=$(echo "$ans" | tr -cd "[:digit:]")

		if [ -z "$keep" ] || [ "$keep" -lt 1 ]; then
			keep=3
		fi

		ask "Enter optional package target ? [ default: all ] : "; read -r target
		ask "Remove packages ? [y/N] [ default: --dry-run ] : "; read -r ans; echo

		case "$ans" in
			y|Y) eval paccache -rvk${keep} -c "$pkgdir" "$target" ;;
			  *) eval paccache -dvk${keep} -c "$pkgdir" "$target" ;;
		esac
	else
		warning "Install optional depends pacman-contrib for option -o to work."
	fi
}

print_warnings() {
	# display list of kernel logs
	local kern_log_list= kern_ctr=0 log= ans= tmp= logdir= kernel_log=

	logdir=$(parse_makepkg LOGDEST)
	tmp=$(mktemp)
	kern_log_list=$(find "$logdir" -maxdepth 1 -type f -regextype posix-extended \
			-regex ".*$KERNEL\-[0-9\.]+.*\-build.log")

	# print kernel menu
	if [ -n "$kern_log_list" ]; then
		for log in $kern_log_list; do
			kern_ctr=$(( kern_ctr +1 ))
			echo "$kern_ctr) : $(basename "$log")" >> "$tmp"
		done
	else
		error "No logs found for kernel: $KERNEL"; die
	fi

	# read choice
	if [ $kern_ctr -gt 1 ]; then
		cat "$tmp"; rm -f "$tmp"
		ans=0

		while [ $ans  -lt 1 ] || [ $ans -gt $kern_ctr ]; do
			echo; ask "Choose kernel build log to parse for warnings [1 - $kern_ctr] : "; read -r ans; echo
			ans=$(echo "$ans" | tr -cd "[:digit:]")
			if [ -z "$ans" ]; then warning "No kernel build log chosen quitting."; die; fi

			# shellcheck disable=SC2086 # quoting $kern_log_list breaks awk
			kernel_log=$(echo $kern_log_list | awk -v var="$ans" '{print $var}')
		done
	else
		kernel_log=$kern_log_list
	fi

	msg "Warnings & errors from: $kernel_log\n"
	# parse log excluding error named object files & parse again for coloured grep
	grep -vE "/.*error.*.o$" "$kernel_log" | grep --colour=auto -iE "(warning|error)"
}

install_kernel() {
	# display list of manually built packages
	local pkgtype= ksign='/etc/dkms/kernel-sign'
	local kern_list= kern_ctr=0 pkg= ans= tmp=
	local kernel_install= header_install= pkgdir=

	tmp=$(mktemp)
	pkgdir=$(parse_makepkg PKGDEST)

	kern_list=$(find "$pkgdir" -maxdepth 1 -type f -regextype posix-extended \
			-regex ".*$KERNEL\-[0-9\.]+.*" | sort -V)
	header_list=$(find "$pkgdir" -maxdepth 1 -type f -regextype posix-extended \
			-regex ".*$KERNEL-headers\-[0-9\.]+.*" | sort -V)

	# install any manually built pkg works
	case "$KERNEL" in
		linux-*) pkgtype='kernel' ;;
		      *) pkgtype='package' ;;
	esac

	# print kernel / AUR package menu
	if [ -n "$kern_list" ]; then
		echo
		for pkg in $kern_list; do
			kern_ctr=$(( kern_ctr +1 ))
			plain "$kern_ctr) : $(basename "$pkg")"
		done
	else
		error "No installable ${pkgtype}s found for: $KERNEL"; die
	fi

	# read choice
	if [ $kern_ctr -gt 1 ]; then
		ans=0
		echo

		while [ $ans  -lt 1 ] || [ $ans -gt $kern_ctr ]; do
			ask "Choose $pkgtype to install [1 - $kern_ctr] : "; read -r ans
			ans=$(echo "$ans" | tr -cd "[:digit:]")
			if [ -z "$ans" ]; then echo; warning "No $pkgtype chosen: quitting."; die; fi

			# shellcheck disable=SC2086 # quoting $kern_list breaks awk
			kernel_install=$(echo $kern_list | awk -v var="$ans" '{print $var}')
			# shellcheck disable=SC2086 # quoting $header_list breaks awk
			header_install=$(echo $header_list | awk -v var="$ans" '{print $var}')
                done
	else
		kernel_install=$pkg
		header_install=$header_list
	fi

	echo

	# overwrite required for multiple signed kernels
	# pacman & paccache do not like quoted vars required by shellcheck hence eval here
	eval sudo pacman -U "$kernel_install" "$header_install" --overwrite ${ksign}.conf --overwrite ${ksign}.sh
}

update_kernel() {
	local kernel_repo=$1 archive=$2 git_retval= repo_url=
	local err_msg="Retrieving '$KERNEL' PKGBUILD failed."

	if [ ! -d $BUILD_DIR ]; then
		msg "Creating: $BUILD_DIR"
		mkdir -p $BUILD_DIR || die
	fi

	cd $BUILD_DIR || die

	# backup old config
	if [ "$archive" != "nobackup" ]; then
		archive_config "$KERNEL"
	fi

	# clean old config
	if [ -d "$KERNEL" ]; then
		clean_dir "$KBUILD_DIR" build
	fi

	# download PKGBUILD
	if [ "$kernel_repo" = "main" ]; then
		repo_url=https://gitlab.archlinux.org/archlinux/packaging/packages/"$KERNEL".git
	elif [ "$kernel_repo" = "aur" ]; then
		repo_url=https://aur.archlinux.org/"$KERNEL".git
	fi

	git clone "$repo_url"
	git_retval=$?

	case "$git_retval" in
	      128) error "$err_msg"; die "$KBUILD_DIR" ;;
		0) if [ ! -f "$KBUILD_DIR"/PKGBUILD ]; then
			error "Non existent AUR kernel"; die "$KBUILD_DIR"
		   fi ;;
		*) warning "Untrapped git_retval: $git_retval"; die ;;
	esac

	# automated update
	patch_pkgbuild
}

build_kernel() {
	local ans= makepkg_retval= logdir=

	logdir=$(parse_makepkg LOGDEST)

	cd "$KBUILD_DIR" || die

	# source PKGBUILD vars
	check_pkgver

	# optionally change kernel compression
	case "$AUTOMATED" in
		y*|Y*) warning "Automated mode is skipping module compression choices" ;;
		    *) check_compress ;;
	esac

	BUILDDIR=$MAKEPKG_DIR makepkg -s -L
	makepkg_retval=$?

	while true; do

	case "$makepkg_retval" in
		 # passing a path param to die() gives an option to clean the directory
		 0) msg "Build complete & logged to:\n\n$(ls "$logdir"/"$KERNEL"*"$pkgver"*.log)\n"; die $MAKEPKG_DIR ;;
	       1|4) error "Error in build()"; die $MAKEPKG_DIR ;; # 1 = bad PGP sig

		13) case "$AUTOMATED" in
			y*|Y*) ans='y'; warning "Automated mode is forcing kernel overwrite" ;;
			    *) ask "Force overwrite $KERNEL ? [y/N] : "; read -r ans ;;
		    esac

		    case "$ans" in
			y|Y) BUILDDIR=$MAKEPKG_DIR makepkg -sf -L
			     makepkg_retval=$? ;;
			  *) error "NOT forcing overwrite: ending build."; die $MAKEPKG_DIR ;;
		    esac
		    ;;

		*) warning "makepkg_retval='$makepkg_retval' untrapped error"; die $MAKEPKG_DIR ;;
	esac

	done
}

rebuild_kernel() {
	# display list of archived PKGBUILDs
	local pkgtype='Archived PKGBUILD' kernel_rebuild=
	local kern_list= kern_ctr=0 pkg= ans= tmp=

	tmp=$(mktemp)

	kern_list=$(find "$BUILD_DIR" -maxdepth 1 -type f -regextype posix-extended \
			-regex ".*$KERNEL\-[0-9\.]+.*.tar.xz" | sort)

	# print kernel archive menu
	if [ -n "$kern_list" ]; then
		echo
		for pkg in $kern_list; do
			kern_ctr=$(( kern_ctr +1 ))
			plain "$kern_ctr) : $(basename "$pkg")"
		done
	else
		error "No rebuildable ${pkgtype}s found for: $KERNEL"; die
	fi

	# read choice
	if [ $kern_ctr -gt 1 ]; then
		ans=0
		echo

		while [ $ans  -lt 1 ] || [ $ans -gt $kern_ctr ]; do
			ask "Choose $pkgtype to rebuild [1 - $kern_ctr] : "; read -r ans
			ans=$(echo "$ans" | tr -cd "[:digit:]")
			if [ -z "$ans" ]; then echo; warning "No $pkgtype chosen: quitting."; die; fi

			# shellcheck disable=SC2086 # quoting $kern_list breaks awk
			kernel_rebuild=$(echo $kern_list | awk -v var="$ans" '{print $var}')
		done
	else
		kernel_rebuild=$pkg
	fi

	echo

	# unpack archived PKGBUILD & run a build
	archive_config
	tar -xJf "$kernel_rebuild"
	time build_kernel
}

clean_dir() {
	local dir=$1 clean_type=$2 tmp= ans=

	tmp=$(mktemp -d)

	# rsync an empty directory is much faster than rm -rf
	if [ -d "$dir" ]; then

		case "$AUTOMATED" in
                        y*|Y*) ans='y'; warning "Automated mode is skipping directory cleanup choice" ;;
                            *) ask "Clean directory: $dir ? [y/N] : "; read -r ans ;;
		esac

		case "$ans" in
			y|Y) msg "Cleaning up: $dir..."
			     rsync -a --delete "$tmp"/ "$dir"/
			     rmdir "$tmp" "$dir"
			     ;;
			  *) if [ "$clean_type" = "build" ]; then
				error "Cannot build without cleaning: $dir"; die
			     else
				warning "Not cleaning: $dir"
			     fi
			     ;;
		esac
	else
		error "Directory does not exist: $dir"
	fi
}

clean_logs() {
	local log= log_list= logpipe_list= log_name= log_dir=

	log_dir=$(parse_makepkg LOGDEST)

	if [ ! -d "$log_dir" ]; then
		error "Makepkg LOGDEST does not exist"; die
	fi

	log_list=$(find "$log_dir" -maxdepth 1 -type f -regextype posix-extended \
		-regex ".*.log(\.[0-9]+)?")
	logpipe_list=$(find "$log_dir" -maxdepth 1 -regextype posix-extended \
		-regex ".*.logpipe\.([[:alnum:]]+)?")

	# build_kernel() leaves named pipes from makepkg logging
	# if user response to clean_dir() takes too long
	if [ -n "$logpipe_list" ]; then
		for x in $logpipe_list; do
			rm -f "$x"
			echo "removed: $x"
		done
		msg "Removed all makepkg logpipes in: $log_dir"
	fi

	if [ -n "$log_list" ]; then
		ask "Remove log files in: $log_dir ? [all/y/N] : "; read -r ans

		case "$ans" in
		      all|ALL) for x in $log_list; do
					rm -f "$x"
					echo "removed: $x"
				done
				msg "Removed all makepkg logs in: $log_dir"
				;;
			  y|Y) msg "<ENTER> to remove each following log (any other input to keep):\n"
				for log in $log_list; do

					log_name=$(basename "$log")
					ask "Remove: $log_name ? "; read -r ans

					case "$ans" in
						  "") rm -f "$log"; msg2 "Removed: $log_name" ;;
						   *) msg2 "Skipped removal of: $log_name" ;;
					esac
				done
				;;
			    *) warning "Not removing logs in: $log_dir"; die ;;
		esac
	else
		warning "No log files in: $log_dir"; die
	fi
}

clean_sources() {
	local dir_list= file_list= dir= file= ans= src_dir=

	src_dir=$(parse_makepkg SRCDEST)

	ask "Remove all directories & files in: $src_dir ? [y/N] : "; read -r ans

	if [ ! -d "$src_dir" ]; then
		error "Makepkg SRCDEST does not exist"; die
	fi

	case "$ans" in
		y|Y) dir_list=$(find "$src_dir" -mindepth 1 -maxdepth 1 -type d)

			# selectively clean directories
			for dir in $dir_list; do
				clean_dir "$dir" sources
			done

			# remove all files
			file_list=$(find "$src_dir" -mindepth 1 -maxdepth 1 -type f)

			for file in $file_list; do
				msg2 "Removing: $file"
				rm -f "$file"
			done
			;;
		  *) warning "Not cleaning sources: $src_dir" ;;
	esac
}

die() {
	local remove_dir=$1

	if [ -n "$remove_dir" ]; then
		clean_dir "$remove_dir" sources
	fi

	exit 1
}

edit_pkgbuild() {
        # edit files
        $GUI_EDITOR $EXAMPLES &
        $CONSOLE_EDITOR "$KBUILD_DIR"/PKGBUILD
}

patch_pkgbuild() {
	# initial support for running update step automated
	local patch_dir=/usr/share/arch-sign-modules/patches
	local patch_file=$patch_dir/$KERNEL.patch ans=
	local pkgbuild=$KBUILD_DIR/PKGBUILD

	cd "$KBUILD_DIR" || die

	if [ -f "$patch_file" ]; then
		msg "Testing $patch_file on $pkgbuild"

		if patch -s -p0 --dry-run < "$patch_file"; then

			msg "$(patch -p0 < "$patch_file")"
			msg2 "Ready to run: $0 -b $KERNEL <ENTER>"; read -r ans

	                case "$ans" in
        	          Y*|y*|"") msg "Starting build: $KERNEL"
				    check_kernel build; time build_kernel ;;
                	         *) msg2 "Exiting." ; die ;;
	                esac
		else
			error "Cannot cleanly patch $pkgbuild"
			ask "Remove $patch_file ? [Y/n] : "

			case "$ans" in
			   Y*|y*|"") sudo rm -f "$patch_file"
				     msg "Removed $patch_file & restarting update_kernel()"

				     # next time branches to 'else'
				     update_kernel $REPO nobackup
				     ;;
			          *) error "Exiting with patch errors on $pkgbuild"; die ;;
			esac
		fi
	else
		# option to run patch_generator()
		error "No patch exists for kernel: $KERNEL"

		if [ "$(check_session)" = "graphical" ]; then
			ask "Start $GUI_EDITOR / $CONSOLE_EDITOR & generate a new patchset ? [Y/n] : "
		else
			ask "Start $CONSOLE_EDITOR & generate a new patchset ? [Y/n] : "
		fi

		read -r ans

		case "$ans" in
		  Y*|y*|"") patch_generator ;;
			 *) error "Exiting with unpatched $pkgbuild" ; die ;;
		esac
	fi
}

patch_generator() {
	local patch_dir=/usr/share/arch-sign-modules/patches
	local ans= pkgbuild=$KBUILD_DIR/PKGBUILD

	msg "Backing up $pkgbuild => $pkgbuild.orig"
	cp PKGBUILD PKGBUILD.orig

	# re-run manual step
	if [ "$(check_session)" = "graphical" ]; then
		edit_pkgbuild
	else
		# terminal session
		msg2 "In separate terminals edit: $pkgbuild"
		msg2 "& consult: $EXAMPLES"
		msg2 "After making changes press <ENTER> here to generate a new patch."
		read -r ans
	fi

	# create new patch
	diff -up PKGBUILD.orig PKGBUILD > "$KERNEL".patch
	ask "Copy $KERNEL.patch to $patch_dir ? [Y/n] : "; read -r ans

	case "$ans" in
	  Y*|y*|"") sudo cp "$KERNEL".patch $patch_dir
		    sudo chmod 644 $patch_dir/"$KERNEL".patch
		    msg "To test the patch just re-run: $0 -u $KERNEL"
		    msg "If the new patch works please consider making a Pull Request ;o)"
		    msg "(or just open a Github issue & paste in your patch so I can test)"
		    ;;
	esac
}

parse_makepkg() {
	local var=$1 conf_list="$HOME/.makepkg.conf /etc/makepkg.conf" conf= value=

	for conf in $conf_list; do
		if [ -f "$conf" ]; then
			value=$(grep ^"$var" "$conf" | cut -d'=' -f 2 2>/dev/null)
			if [ -n "$value" ]; then break; fi
		fi
	done

	if [ -z "$value" ]; then
		error "Failed to parse $var from makepkg config"; die
	else
		echo "$value"
	fi
}

sanitize_path() {
	echo "$1" | tr -s '@.-/_' | awk '{print tolower($0)}' \
		| tr -cd '[:alnum:] [=@=] [=.=] [=-=] [=+=] [=/=] [=_=]'
}

check_args() {
	local option=$1 type=$2 arg=$3
	local err_msg="Option '-$option' argument '$arg' requires:"

	case "$type" in
		dir) if [ ! -d "$arg" ] && [ ! -f "$arg" ];  then
			error "$err_msg existing directory path."; die
		     fi
		     ;;
	       none) error "$err_msg argument."; die ;;
	esac
}

get_options() {
	local arg= opt=

	# no command line switches
	[ $# -eq 0 ] && usage

	# check build dir & editors
	check_config

	while getopts ":u:b:i:r:c:w:hsloy" opt

	do
		if [ -n "${OPTARG}" ]; then
			case "$opt" in
				c) arg=$(sanitize_path "${OPTARG}") ;;
			esac
		fi

		case "$opt" in
			u) KERNEL=${OPTARG}; check_kernel update; update_kernel $REPO ;;
			b) KERNEL=${OPTARG}; check_kernel build; time build_kernel ;;
			i) KERNEL=${OPTARG}; check_kernel install; install_kernel ;;
			r) KERNEL=${OPTARG}; check_kernel rebuild; rebuild_kernel ;;
			y) AUTOMATED='Y' ;;
			c) check_args "$opt" dir "$arg" ; clean_dir "$arg" sources ;;
			s) clean_sources ;;
			l) clean_logs ;;
			w) KERNEL=${OPTARG}; print_warnings ;;
			o) remove_old_pkgs ;;
			h) usage ;;
			:) check_args "$OPTARG" none none ;;
		       \?) usage ;;
		esac
	done
}

main() {
	# reuse pacman's message colours
	local utils=/usr/share/makepkg/util/message.sh

	# shellcheck disable=SC1090 # does not exist in test env
	if [ -f $utils ]; then
		. $utils
		colorize
	else
		printf "%s\n" "$utils is missing: colour messages are broken in $0 :("
		exit 1
	fi

	# USER configuration can be stored here
	# shellcheck disable=SC1090 # does not exist in test env
	if [ -f $USER_CONFIG ]; then
		. $USER_CONFIG
	fi

	# parse command line
	get_options "$@"
}

## START ##
main "$@"
exit $?
